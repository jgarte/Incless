(cl:in-package #:incless)

(defmethod print-object-using-client ((client standard-client) (vec vector) stream)
  (cond ((and (not *print-readably*) *print-level* (>= *current-depth* *print-level*))
         (write-char #\# stream))
        ((or *print-array* *print-readably*)
         (write-string "#(" stream)
         (let ((*current-depth* (1+ *current-depth*)))
           (loop :with l := (1- (length vec))
                 :for i :below l
                 :do (write-object client (aref vec i) stream)
                     (write-char #\Space stream)
                 :finally (write-object client (aref vec l) stream)))
         (write-string ")" stream))
        (t (write-string "#<" stream)
           (write-object client (type-of vec) stream)
           (write-string ">" stream)))
  vec)
